--실습문제--
-- 처음에 DROP절을 쓸 때는 만든 테이블 역순으로 작성 => 외래키에 엮여있을 수 있기 때문에
DROP TABLE TB_RENT;
DROP TABLE TB_MEMBER;
DROP TABLE TB_BOOK;
DROP TABLE TB_PUBLISHER;

--도서관리 프로그램을 만들기 위한 테이블을 만들기
--이때, 제약조건에 이름을 부여할 것
-- 각 컬럼에 주석달기


--1. 출판사들에 대한 데이터를 담기 위한 출판사 테이블(TB_PUBLISHER)
--컬럼: PUB_NO(출판사번호) --기본키(PUBLISHER_PK)
-- PUB_NAME(출판사명) --NOT NULL(PUBLICHSER_NN)
-- PHONE(출판사전화번호) --제약조건 없음

CREATE TABLE TB_PUBLISHER(
    PUB_NO NUMBER CONSTRAINT PUBLISHER_PK PRIMARY KEY, -- NUMBER로 저장하게 되면 001 입력해도 1만 저장됨 => 001로 저장하고 싶으면 VARCHAR2로 저장해야함
    PUB_NAME VARCHAR2(30) CONSTRAINT PUBLISHER_NN NOT NULL,
    PHONE VARCHAR2(15)
);
COMMENT ON COLUMN TB_PUBLISHER.PUB_NO IS '출판사번호';
COMMENT ON COLUMN TB_PUBLISHER.PUB_NAME IS '출판사명';
COMMENT ON COLUMN TB_PUBLISHER.PHONE IS '출판사전화번호';

--3개 정도의 샘플 데이터 추가하기
INSERT INTO TB_PUBLISHER
VALUES(001, '더퀘스트', '02-456-7890');
INSERT INTO TB_PUBLISHER
VALUES(002, '세미콜론', '031-639-8520');
INSERT INTO TB_PUBLISHER
VALUES(003, '문학동네', '02-789-1475');

--2. 도서들에 대한 데이터를 담기 위한 도서 테이블(TB_BOOK)
--컬럼: BK_NO(도서번호) --기본키(BOOK_PK)
-- BK_TITLE(도서명) --NOT NULL(BOOK_NN_TITLE)
-- BK_AUTHOR(저자명) --NOT NULL(BOOK_NN_AUTHOR)
-- BK_PRICE(가격)
-- BK_STOCK(재고) --기본값 1로 지정
-- BK_PUB_NO(출판사번호) --외래키(BOOK_FK)(TB_PUBLISHER 테이블을 참조하도록)
-- 이때 참조하고 있는 부모데이터 삭제 시 자식데이터도 삭제되도록 설정

CREATE TABLE TB_BOOK(
    BK_NO NUMBER CONSTRAINT BOOK_PK PRIMARY KEY,
    BK_TITLE VARCHAR2(60) CONSTRAINT BOOK_NN_TITLE NOT NULL,
    BK_AUTHOR VARCHAR2(30) CONSTRAINT BOOK_NN_AUTHOR NOT NULL,
    BK_PRICE NUMBER,
    BK_STOCK NUMBER DEFAULT '1', -- DEFAULT는 자료형 바로 옆에 나와야하며, DEFAULT값은 자료형과 일치해야함
    BK_PUB_NO NUMBER CONSTRAINT BOOK_FK REFERENCES TB_PUBLISHER ON DELETE CASCADE -- 외래키를 지정할 때는 참조하게 되는 컬럼과 자료형이 일치해야함.
);

COMMENT ON COLUMN TB_BOOK.BK_NO IS '도서번호';
COMMENT ON COLUMN TB_BOOK.BK_TITLE IS '도서명';
COMMENT ON COLUMN TB_BOOK.BK_AUTHOR IS '저자명';
COMMENT ON COLUMN TB_BOOK.BK_PRICE IS '가격';
COMMENT ON COLUMN TB_BOOK.BK_STOCK IS '재고';
COMMENT ON COLUMN TB_BOOK.BK_PUB_NO IS '출판사번호';

--5개 정도의 샘플 데이터 추가하기
INSERT INTO TB_BOOK
VALUES(100, '노마드 투자자 서한', '닉 슬립', 31500, 200, 001);
INSERT INTO TB_BOOK
VALUES(101, '밥 챙겨 먹어요, 행복하세요', '마포농수산쎈타', 20000, 300, 002);
INSERT INTO TB_BOOK
VALUES(102, '여행의 이유', '김영하', 12150, 500, 003);
INSERT INTO TB_BOOK
VALUES(103, '디컨슈머', 'J.B.매키넌', 16650, DEFAULT, 003);
INSERT INTO TB_BOOK
VALUES(104, '어른의 문장력', '김선영', 14400, 1280, 001);
INSERT 
INTO TB_BOOK
        (
          BK_NO
        , BK_TITLE
        , BK_AUTHOR
        )
VALUES
        (
            2
        , '인생의 역사'
        , '신형철'
        );

SELECT * FROM TB_BOOK;



--3. 회원에 대한 데이터를 담기 위한 회원 테이블(TB_MEMBER)
--컬럼명: MEMBER_NO(회원번호) --기본키(MEMBER_PK)
-- MEMBER_ID(아이디) --중복금지(MEMBER_UQ)
--MEMBER_PWD(비밀번호) NOT NULL(MEMBER_NN_PWD)
--MEMBER_NAME(회원명) NOT NULL(MEMBER_NN_NAME)
--GENDER(성별) 'M' 또는 'F'로 입력되도록 제한(MEMBER_CK_GEN)
--ADDRESS(주소)
--PHONE(연락처)
--STATUS(탈퇴여부) --기본값으로 'N' 그리고 'Y' 혹은 'N'으로 입력되도록 제약조건(MEMBER_CK_STA)
--ENROLL_DATE(가입일) --기본값으로 SYSDATE, NOT NULL 조건(MEMBER_NN_EN)
--5개 정도의 샘플 데이터 추가하기
CREATE TABLE TB_MEMBER(
    MEMBER_NO NUMBER CONSTRAINT MEMBER_PK PRIMARY KEY,
    MEMBER_ID VARCHAR2(10) CONSTRAINT MEMBER_UQ UNIQUE,
    MEMBER_PWD VARCHAR2(20) CONSTRAINT MEMBER_NN_PWD NOT NULL,
    MEMBER_NAME VARCHAR2(15) CONSTRAINT MEMBER_NN_NAME NOT NULL,
    GENDER CHAR(1) CONSTRAINT MEMBER_CK_GEN CHECK(GENDER IN ('M', 'F')),
    ADDRESS VARCHAR2(150),
    PHONE VARCHAR2(15),
    STATUS CHAR(1) DEFAULT 'N' CONSTRAINT MEMBER_CK_STA CHECK(STATUS IN ('Y', 'N')),
    ENROLL_DATE DATE DEFAULT SYSDATE CONSTRAINT MEMBER_NN_EN NOT NULL
);

COMMENT ON COLUMN TB_MEMBER.MEMBER_NO IS '회원번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_ID IS '아이디';
COMMENT ON COLUMN TB_MEMBER.MEMBER_PWD IS '비밀번호';
COMMENT ON COLUMN TB_MEMBER.MEMBER_NAME IS '회원명';
COMMENT ON COLUMN TB_MEMBER.GENDER IS '성별';
COMMENT ON COLUMN TB_MEMBER.ADDRESS IS '주소';
COMMENT ON COLUMN TB_MEMBER.PHONE IS '연락처';
COMMENT ON COLUMN TB_MEMBER.STATUS IS '탈퇴여부';
COMMENT ON COLUMN TB_MEMBER.ENROLL_DATE IS '가입일';

INSERT 
INTO TB_MEMBER
            (
              MEMBER_NO
            , MEMBER_ID
            , MEMBER_PWD
            , MEMBER_NAME
            )
VALUES
            (
                1520
                , 'yoonyj1'
                , '1q2w3e4r!'
                , '윤여진'
            );
            
INSERT
INTO TB_MEMBER
        (
          MEMBER_NO
        , MEMBER_ID
        , MEMBER_PWD
        , MEMBER_NAME
        )
VALUES
        (
          1521
        , 'yoonyj2'
        , '1q2w3e4r!'
        , '윤여준'
        );
        
INSERT INTO TB_MEMBER
VALUES(1523, 'insert01', 'delete1', '김선영', 'M', '경기도 이천시', '010-4657-8910', 'Y', '22/12/05');

INSERT INTO TB_MEMBER
VALUES(1522, 'delete02', 'insert01', '임용한', 'F', '서울특별시', '010-7985-1218', DEFAULT, DEFAULT); 

INSERT 
INTO TB_MEMBER
        (
              MEMBER_NO
            , MEMBER_ID
            , MEMBER_PWD
            , MEMBER_NAME
       )
VALUES
        (
                1230
            , 'qwer1234'
            , 'unionall'
            , '신형철'
        );


--4. 도서를 대여한 회원에 대한 데이터를 담기 위한 대여목록 테이블(TB_RENT)
--컬럼:
--RENT_NO(대여번호) --기본키(RENT_PK)
--RENT_MEM_NO(대여회원번호) --외래키(RENT_FK_MEM) TB_MEMBER와 참조하도록
--이때 부모데이터 삭제 시 NULL값이 되도록 옵션 설정
--RENT_BOOK_NO(대여도서번호) --외래키(RENT_FK_BOOK) TB_BOOK와 참조하도록
--이때 부모데이터 삭제 시 NULL값이 되도록 옵션설정
--RENT_DATE(대여일) --기본값 SYSDATE
--샘플데이터 3개정도 추가하기
CREATE TABLE TB_RENT(
    RENT_NO NUMBER CONSTRAINT RENT_PK PRIMARY KEY,
    RENT_MEM_NO NUMBER CONSTRAINT RENT_FK_MEM REFERENCES TB_MEMBER ON DELETE SET NULL,
    RENT_BOOK_NO NUMBER CONSTRAINT RENT_FK_BOOK REFERENCES TB_BOOK ON DELETE SET NULL,
    RENT_DATE DATE DEFAULT SYSDATE
);

COMMENT ON COLUMN TB_RENT.RENT_NO IS '대여번호';
COMMENT ON COLUMN TB_RENT.RENT_MEM_NO IS '대여회원번호';
COMMENT ON COLUMN TB_RENT.RENT_BOOK_NO IS '대여도서번호';
COMMENT ON COLUMN TB_RENT.RENT_DATE IS '대여일';

INSERT INTO TB_RENT
VALUES(1, 1520, 102, '22/11/22');
INSERT INTO TB_RENT
VALUES(2, 1521, 2, DEFAULT);
INSERT INTO TB_RENT
VALUES(3, 1522, 100, '22/10/10');

--2번 도서를 대여한 회원의 이름, 아이디, 대여일, 반납예정일(대여일+7)을 조회하시오.
-- ANSI 구문
SELECT MEMBER_NAME, MEMBER_ID, RENT_DATE, RENT_DATE + 7 AS "반납예정일"
FROM TB_MEMBER M
JOIN TB_RENT R ON(MEMBER_NO = RENT_MEM_NO)
WHERE RENT_BOOK_NO = '2';

-- 오라클 구문
SELECT MEMBER_NAME, MEMBER_ID, RENT_DATE, RENT_DATE + 7 AS "반납예정일"
FROM TB_MEMBER, TB_RENT
WHERE MEMBER_NO = RENT_MEM_NO AND RENT_BOOK_NO = '2';
